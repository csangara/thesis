puck <- read.SpatialRNA(datadir) # read in the SpatialRNA object
barcodes <- colnames(puck@counts) #pixels to be used (a list of barcode names).
# This list can be restricted if you want to crop the puck e.g.
# puck <- restrict_puck(puck, barcodes) provides a basic plot of the nUMI of each pixel
# on the plot:
plot_puck_continuous(puck, barcodes, puck@nUMI, ylimit = c(0,round(quantile(puck@nUMI,0.9))),
title ='plot of nUMI')
myRCTD <- create.RCTD(puck, reference, max_cores = 1)
myRCTD <- run.RCTD(myRCTD, doublet_mode = TRUE)
results <- myRCTD@results
# normalize the cell type proportions to sum to 1.
norm_weights = sweep(results$weights, 1, rowSums(results$weights), '/')
cell_type_names <- myRCTD@cell_type_info$info[[2]] #list of cell type names
spatialRNA <- myRCTD@spatialRNA
resultsdir <- 'RCTD_Plots' ## you may change this to a more accessible directory on your computer.
dir.create(resultsdir)
# make the plots
# Plots the confident weights for each cell type as in full_mode (saved as
# 'results/cell_type_weights_unthreshold.pdf')
plot_weights(cell_type_names, spatialRNA, resultsdir, norm_weights)
# Plots all weights for each cell type as in full_mode. (saved as
# 'results/cell_type_weights.pdf')
plot_weights_unthreshold(cell_type_names, spatialRNA, resultsdir, norm_weights)
# Plots the weights for each cell type as in doublet_mode. (saved as
# 'results/cell_type_weights_doublets.pdf')
plot_weights_doublet(cell_type_names, spatialRNA, resultsdir, results$weights_doublet,
results$results_df)
# Plots the number of confident pixels of each cell type in 'full_mode'. (saved as
# 'results/cell_type_occur.pdf')
plot_cond_occur(cell_type_names, resultsdir, norm_weights, spatialRNA)
# makes a map of all cell types, (saved as
# 'results/all_cell_types.pdf')
plot_all_cell_types(results$results_df, spatialRNA@coords, cell_type_names, resultsdir)
# doublets
#obtain a dataframe of only doublets
doublets <- results$results_df[results$results_df$spot_class == "doublet_certain",]
# Plots all doublets in space (saved as
# 'results/all_doublets.pdf')
plot_doublets(spatialRNA, doublets, resultsdir, cell_type_names)
# Plots all doublets in space for each cell type (saved as
# 'results/all_doublets_type.pdf')
plot_doublets_type(spatialRNA, doublets, resultsdir, cell_type_names)
# a table of frequency of doublet pairs
doub_occur <- table(doublets$second_type, doublets$first_type)
# Plots a stacked bar plot of doublet ocurrences (saved as
# 'results/doublet_stacked_bar.pdf')
plot_doub_occur_stack(doub_occur, resultsdir, cell_type_names)
# get a SpatialRNA object that has single cell types, each with a spatial coordinate and RNA
# counts.
puck_d <- get_decomposed_data(results$results_df, myRCTD@internal_vars$gene_list_reg, spatialRNA, results$weights_doublet,
myRCTD@cell_type_info$renorm)
seurat_obj =  readRDS("../rds/allen_cortex_dwn.rds")
DimPlot(seurat_obj, group.by = "subclass", label = T)
#DimPlot(seurat_obj, group.by = "brain_subregion")
#seurat_obj@meta.data$celltype = seurat_obj@meta.data$subclass
#seurat_obj = seurat_obj %>% SetIdent(value = "celltype")
seurat_obj <- SCTransform(seurat_obj, assay="RNA", verbose = FALSE)
seurat_obj <- RunPCA(seurat_obj, verbose = FALSE)
seurat_obj <- RunUMAP(seurat_obj, dims = 1:30, verbose = FALSE)
seurat_obj <- FindNeighbors(seurat_obj, dims = 1:30, verbose = FALSE)
seurat_obj <- FindClusters(seurat_obj, verbose = FALSE)
seurat_obj@meta.data$celltype = seurat_obj@meta.data$subclass
seurat_obj = seurat_obj %>% SetIdent(value = "celltype")
DimPlot(seurat_obj, reduction = "umap",pt.size = 0.5, label = T)
library(Seurat)
library(synthvisium)
library(dplyr)
seurat_obj =  readRDS("../rds/allen_cortex_dwn.rds")
DimPlot(seurat_obj, group.by = "subclass", label = T)
#DimPlot(seurat_obj, group.by = "brain_subregion")
#seurat_obj@meta.data$celltype = seurat_obj@meta.data$subclass
#seurat_obj = seurat_obj %>% SetIdent(value = "celltype")
seurat_obj <- SCTransform(seurat_obj, assay="RNA", verbose = FALSE)
seurat_obj <- RunPCA(seurat_obj, verbose = FALSE)
seurat_obj <- RunUMAP(seurat_obj, dims = 1:30, verbose = FALSE)
seurat_obj <- FindNeighbors(seurat_obj, dims = 1:30, verbose = FALSE)
seurat_obj <- FindClusters(seurat_obj, verbose = FALSE)
seurat_obj@meta.data$celltype = seurat_obj@meta.data$subclass
seurat_obj = seurat_obj %>% SetIdent(value = "celltype")
DimPlot(seurat_obj, reduction = "umap",pt.size = 0.5, label = T)
synthetic_visium_data = generate_synthetic_visium(seurat_obj = seurat_obj, dataset_type = "real",
clust_var = "subclass", region_var = "brain_subregion" , n_regions = NULL,
n_spots_min = 5, n_spots_max = 20, visium_mean = 20000, visium_sd = 5000)
seurat_obj_visium = CreateSeuratObject(counts = synthetic_visium_data$counts, min.cells = 2, min.features = 200, assay = "Spatial")
seurat_obj_visium = SCTransform(seurat_obj_visium, assay = "Spatial", verbose = FALSE)
seurat_obj_visium = RunPCA(seurat_obj_visium, assay = "SCT", verbose = FALSE)
seurat_obj_visium = RunTSNE(seurat_obj_visium, reduction = "pca", dims = 1:30)
seurat_obj_visium = RunUMAP(seurat_obj_visium, reduction = "pca", dims = 1:30)
seurat_obj_visium = FindNeighbors(seurat_obj_visium, reduction = "pca", dims = 1:30)
seurat_obj_visium = FindClusters(seurat_obj_visium, verbose = FALSE,resolution = 0.1)
p_priorregion = DimPlot(seurat_obj_visium, reduction = "umap", label = TRUE, group.by = "orig.ident") # a priori defined regions
p_exprs_clusters = DimPlot(seurat_obj_visium, reduction = "umap", label = TRUE) # a priori defined regions
patchwork::wrap_plots(list(p_priorregion, p_exprs_clusters), nrow = 1)
p_exprs_clusters = DimPlot(seurat_obj_visium, reduction = "umap", label = TRUE) # a priori defined regions
p_exprs_clusters = DimPlot(seurat_obj_visium, reduction = "umap", label = TRUE) # a priori defined regions
p_priorregion = DimPlot(seurat_obj_visium, reduction = "umap", label = TRUE, group.by = "orig.ident") # a priori defined regions
p_exprs_clusters = DimPlot(seurat_obj_visium, reduction = "umap", label = TRUE) # a priori defined regions
patchwork::wrap_plots(list(p_priorregion, p_exprs_clusters), nrow = 1)
p_exprs_clusters
DimPlot(seurat_obj, reduction = "umap",pt.size = 0.5, label = T)
DimPlot(seurat_obj_visium, reduction = "umap", label = TRUE, group.by = "orig.ident")
DimPlot(seurat_obj, reduction = "umap",pt.size = 0.5, label = T)
seurat_obj_scRNA =  readRDS("../rds/allen_cortex_dwn.rds")
DimPlot(seurat_obj_scRNA, group.by = "subclass", label = T)
#DimPlot(seurat_obj, group.by = "brain_subregion")
#seurat_obj@meta.data$celltype = seurat_obj@meta.data$subclass
#seurat_obj = seurat_obj %>% SetIdent(value = "celltype")
seurat_obj_scRNA <- SCTransform(seurat_obj_scRNA, assay="RNA", verbose = FALSE)
seurat_obj_scRNA <- RunPCA(seurat_obj_scRNA, verbose = FALSE)
seurat_obj_scRNA <- RunUMAP(seurat_obj_scRNA, dims = 1:30, verbose = FALSE)
seurat_obj_scRNA <- FindNeighbors(seurat_obj_scRNA, dims = 1:30, verbose = FALSE)
seurat_obj_scRNA <- FindClusters(seurat_obj_scRNA, verbose = FALSE)
seurat_obj_scRNA@meta.data$celltype = seurat_obj_scRNA@meta.data$subclass
seurat_obj_scRNA = seurat_obj_scRNA %>% SetIdent(value = "celltype")
DimPlot(seurat_obj_scRNA, reduction = "umap",pt.size = 0.5, label = T)
synthetic_visium_data = generate_synthetic_visium(seurat_obj = seurat_obj_scRNA, dataset_type = "real",
clust_var = "subclass", region_var = "brain_subregion" , n_regions = NULL,
n_spots_min = 5, n_spots_max = 20, visium_mean = 20000, visium_sd = 5000)
setwd("D:/Work (Yr 2 Sem 1)/Thesis/Scripts")
seurat_obj_scRNA =  readRDS("../rds/allen_cortex_dwn.rds")
DimPlot(seurat_obj_scRNA, group.by = "subclass", label = T)
#DimPlot(seurat_obj, group.by = "brain_subregion")
#seurat_obj@meta.data$celltype = seurat_obj@meta.data$subclass
#seurat_obj = seurat_obj %>% SetIdent(value = "celltype")
seurat_obj_scRNA <- SCTransform(seurat_obj_scRNA, assay="RNA", verbose = FALSE)
seurat_obj_scRNA <- RunPCA(seurat_obj_scRNA, verbose = FALSE)
seurat_obj_scRNA <- RunUMAP(seurat_obj_scRNA, dims = 1:30, verbose = FALSE)
seurat_obj_scRNA <- FindNeighbors(seurat_obj_scRNA, dims = 1:30, verbose = FALSE)
seurat_obj_scRNA <- FindClusters(seurat_obj_scRNA, verbose = FALSE)
seurat_obj_scRNA@meta.data$celltype = seurat_obj_scRNA@meta.data$subclass
seurat_obj_scRNA = seurat_obj_scRNA %>% SetIdent(value = "celltype")
DimPlot(seurat_obj_scRNA, reduction = "umap",pt.size = 0.5, label = T)
synthetic_visium_data = generate_synthetic_visium(seurat_obj = seurat_obj_scRNA, dataset_type = "real",
clust_var = "subclass", region_var = "brain_subregion" , n_regions = NULL,
n_spots_min = 5, n_spots_max = 20, visium_mean = 20000, visium_sd = 5000)
seurat_obj_visium = CreateSeuratObject(counts = synthetic_visium_data$counts, min.cells = 2, min.features = 200, assay = "Spatial")
seurat_obj_visium = SCTransform(seurat_obj_visium, assay = "Spatial", verbose = FALSE)
seurat_obj_visium = RunPCA(seurat_obj_visium, assay = "SCT", verbose = FALSE)
seurat_obj_visium = RunTSNE(seurat_obj_visium, reduction = "pca", dims = 1:30)
seurat_obj_visium = RunUMAP(seurat_obj_visium, reduction = "pca", dims = 1:30)
seurat_obj_visium = FindNeighbors(seurat_obj_visium, reduction = "pca", dims = 1:30)
seurat_obj_visium = FindClusters(seurat_obj_visium, verbose = FALSE, resolution = 0.1)
p_priorregion = DimPlot(seurat_obj_visium, reduction = "umap", label = TRUE, group.by = "orig.ident") # a priori defined regions
p_exprs_clusters = DimPlot(seurat_obj_visium, reduction = "umap", label = TRUE) # a priori defined regions
patchwork::wrap_plots(list(p_priorregion, p_exprs_clusters), nrow = 1)
DimPlot(seurat_obj_scRNA, group.by = "subclass", label = T)
DimPlot(seurat_obj_scRNA, reduction = "umap",pt.size = 0.5, label = T)
DimPlot(seurat_obj, group.by = "brain_subregion")
DimPlot(seurat_obj_visium, reduction = "umap", label = TRUE, group.by = "orig.ident")
seurat_object_visium@meta.data
seurat_obj_visium@meta.data$seurat_clusters
seurat_obj_visium = FindClusters(seurat_obj_visium, verbose = FALSE, resolution = 0.5)
seurat_obj_visium@meta.data$seurat_clusters
seurat_obj_visium = FindClusters(seurat_obj_visium, verbose = FALSE, resolution = 1)
seurat_obj_visium@meta.data$seurat_clusters
patchwork::wrap_plots(list(p_priorregion, p_exprs_clusters), nrow = 1)
p_exprs_clusters = DimPlot(seurat_obj_visium, reduction = "umap", label = TRUE) # a priori defined regions
patchwork::wrap_plots(list(p_priorregion, p_exprs_clusters), nrow = 1)
synthetic_visium_data = generate_synthetic_visium(seurat_obj = seurat_obj_scRNA, dataset_type = "real",
clust_var = "subclass", region_var = "brain_subregion" , n_regions = NULL,
n_spots_min = 50, n_spots_max = 200, visium_mean = 20000, visium_sd = 5000)
seurat_obj_visium = CreateSeuratObject(counts = synthetic_visium_data$counts, min.cells = 2, min.features = 200, assay = "Spatial")
seurat_obj_visium = SCTransform(seurat_obj_visium, assay = "Spatial", verbose = FALSE)
seurat_obj_visium = RunPCA(seurat_obj_visium, assay = "SCT", verbose = FALSE)
seurat_obj_visium = RunTSNE(seurat_obj_visium, reduction = "pca", dims = 1:30)
seurat_obj_visium = RunUMAP(seurat_obj_visium, reduction = "pca", dims = 1:30)
seurat_obj_visium = FindNeighbors(seurat_obj_visium, reduction = "pca", dims = 1:30)
seurat_obj_visium = FindClusters(seurat_obj_visium, verbose = FALSE, resolution = 1)
p_priorregion = DimPlot(seurat_obj_visium, reduction = "umap", label = TRUE, group.by = "orig.ident") # a priori defined regions
p_exprs_clusters = DimPlot(seurat_obj_visium, reduction = "umap", label = TRUE) # a priori defined regions
patchwork::wrap_plots(list(p_priorregion, p_exprs_clusters), nrow = 1)
seurat_obj_visium = FindClusters(seurat_obj_visium, verbose = FALSE, resolution = 0.7)
p_exprs_clusters = DimPlot(seurat_obj_visium, reduction = "umap", label = TRUE) # a priori defined regions
patchwork::wrap_plots(list(p_priorregion, p_exprs_clusters), nrow = 1)
seurat_obj_visium = FindClusters(seurat_obj_visium, verbose = FALSE, resolution = 0.7)
p_exprs_clusters = DimPlot(seurat_obj_visium, reduction = "umap", label = TRUE) # a priori defined regions
patchwork::wrap_plots(list(p_priorregion, p_exprs_clusters), nrow = 1)
seurat_obj_visium = FindClusters(seurat_obj_visium, verbose = FALSE, resolution = 0.5)
p_exprs_clusters = DimPlot(seurat_obj_visium, reduction = "umap", label = TRUE) # a priori defined regions
patchwork::wrap_plots(list(p_priorregion, p_exprs_clusters), nrow = 1)
SpatialPlot(seurat_obj_visium)
seurat_object_visium
seurat_obj_visium
seurat_obj
brain <- LoadData("stxBrain", type = "anterior1")
library(SeuratData)
brain <- LoadData("stxBrain", type = "anterior1")
brain
brain$nFeature_Spatial
brain$region
brain@images
brain@images$anterior1
brain@active.ident
brain@images$anterior1@coordinates
seurat_obj_visium@images
# Explore synthetic visium data
synthetic_visium_data$counts %>% as.matrix() %>% .[1:5,1:5]
synthetic_visium_data$spot_composition %>% .[1:10,]
synthetic_visium_data$relative_spot_composition %>% .[1:10,]
synthetic_visium_data$relative_spot_composition %>% .[1:10,] %>% rowSums
synthetic_visium_data$relative_spot_composition %>% .[1:10,-end] %>% rowSums
synthetic_visium_data$relative_spot_composition %>% .[1:10,1:23] %>% rowSums
synthetic_visium_data$gold_standard_priorregion %>% head()
# Explore synthetic visium data
synthetic_visium_data$counts %>% as.matrix() %>% .[1:5,100:105] #  Gene counts for each spot
# Explore synthetic visium data
synthetic_visium_data$counts %>% as.matrix() %>% .[100:105,1:5] #  Gene counts for each spot
seurat_obj_scRNA$brain_region
seurat_obj_scRNA$brain_subregion
seurat_obj_scRNA@images
seurat_obj_scRNA
seurat_obj_scRNA$brain_hemisphere
seurat_obj_scRNA$brain_region
factor(seurat_obj_scRNA$brain_region)
seurat_obj_scRNA
Idents(object = seurat_obj_scRNA) <- seurat_obj_scRNA@meta.data$subclass
cluster_markers_all <- FindAllMarkers(object = seurat_obj_scRNA,
assay = "SCT",
slot = "data",
verbose = TRUE,
only.pos = TRUE,
logfc.threshold = 1,
min.pct = 0.9)
cluster_markers_all
cluster_loaded <- readRDS("../rds/markers_anterior.RDS")
cluster_loaded$cluster
cluster_loaded$gene
head(cluster_loaded[,c("gene", "cluster")])
head(cluster_markers_all[,c("gene", "cluster")])
View(cluster_markers_all)
head(cluster_markers_all[,cluster=="Astro"])
head(cluster_markers_all[,cluster_markers_all$cluster=="Astro"])
head(cluster_markers_all[,])
cluster_markers_all$cluster=="Astro"
cluster_markers_all[,cluster_markers_all$cluster=="Astro"]
cluster_markers_all[cluster_markers_all$cluster=="Astro",]
cluster_markers_all[cluster_markers_all$cluster=="Astro","gene"]
?intersect
intersec(cluster_markers_all[cluster_markers_all$cluster=="Astro","gene"], cluster_loaded[cluster_loaded$cluster=="Astro","gene"])
intersect(cluster_markers_all[cluster_markers_all$cluster=="Astro","gene"], cluster_loaded[cluster_loaded$cluster=="Astro","gene"])
length(cluster_markers_all[cluster_markers_all$cluster=="Astro","gene"])
set.seed(123)
spotlight_deconv <- spotlight_deconvolution(se_sc = seurat_obj_scRNA,
counts_spatial = seurat_obj_visium@assays$Spatial@counts,
clust_vr = "subclass",
cluster_markers = cluster_markers_all,
cl_n = 50,
hvg = 3000,
ntop = NULL,
transf = "uv",
method = "nsNMF",
min_cont = 0.09)
library(SPOTlight)
spotlight_deconv <- spotlight_deconvolution(se_sc = seurat_obj_scRNA,
counts_spatial = seurat_obj_visium@assays$Spatial@counts,
clust_vr = "subclass",
cluster_markers = cluster_markers_all,
cl_n = 50,
hvg = 3000,
ntop = NULL,
transf = "uv",
method = "nsNMF",
min_cont = 0.09)
rm(brain)
rm(cluster_loaded)
decon_mtrx <- spotlight_deconv[[2]]
decon_mtrx
nrow(dcon_mtrx)
nrow(decon_mtrx)
nrow(seurat_obj_visium)
ncol(seurat_obj_visium)
save.image("D:/Work (Yr 2 Sem 1)/Thesis/Scripts/test1.RData")
head(synthetic_visium_data$spot_composition)
colname(synthetic_visium_data$spot_composition)
colnames(synthetic_visium_data$spot_composition)
colnames(decon_mtrx)
colnames(synthetic_visium_data$relative_spot_composition)
head(decon_mtrx)
head(decon_mtrx[,1:23]) %>% rowSums
cor(synthetic_visium_data$relative_spot_composition[,1:23], decon_mtrx[,1:23])
cor(t(synthetic_visium_data$relative_spot_composition[,1:23]), t(decon_mtrx[,1:23])
)
synthetic_visium_data$relative_spot_composition[,1:23]
decon_mtrx[,1:23]
dim(synthetic_visium_data$relative_spot_composition[,1:23])
dim(decon_mtrx[,1:23])
res = cor(t(synthetic_visium_data$relative_spot_composition[,1:23]), t(decon_mtrx[,1:23])
)
View(res)
dim(res)
mean(diag(res))
diag(res)
mean(diag(res), na.rm=TRUE)
res2 = cor(synthetic_visium_data$relative_spot_composition[,1:23], decon_mtrx[,1:23])
res2
res2 = cor(synthetic_visium_data$relative_spot_composition[,1:23], decon_mtrx[,1:23], na.rm=TRUE)
?cor
res2 = cor(synthetic_visium_data$relative_spot_composition[,1:23], decon_mtrx[,1:23], na.rm=TRUE, use="complete.obs")
res2 = cor(synthetic_visium_data$relative_spot_composition[,1:23], decon_mtrx[,1:23], use="complete.obs")
res2
diag(res2)
cor(diag(res2), na.rm=TRUE)
mean(diag(res2), na.rm=TRUE)
mean(diag(res), na.rm=TRUE)
knownP = synthetic_visium_data$relative_spot_composition[1,1:23]
predP = decon_mtrx[1,1:23]
new_pred = data.frame("predP" = predP,
"knownP" = knownP,
"cellType" = names(knownP))
View(new_pred)
names(knownP)
colnames(knownP)
new_pred = data.frame("predP" = predP,
"knownP" = knownP,
"cellType" = colnames(knownP))
View(knownP)
View(new_pred)
View(new_pred)
new_pred = data.frame("predP" = predP,
"knownP" = knownP,
)
new_pred = data.frame("predP" = predP,
"knownP" = knownP
)
View(new_pred)
knownP = synthetic_visium_data$relative_spot_composition[1,1:23]
predP = decon_mtrx[1,1:23]
new_pred = data.frame("predP" = predP,
"knownP" = knownP,
"cellType" = colnames(knownP))
new_pred = data.frame("predP" = predP,
"knownP" = c(knownP),
"cellType" = colnames(knownP))
View(new_pred)
knownP
c(knownP)
unlist(knownP)
unname(knownP)
new_pred = data.frame("predP" = predP,
"knownP" = unname(knownP),
"cellType" = colnames(knownP))
knownP = synthetic_visium_data$relative_spot_composition[1,1:23]
predP = decon_mtrx[1,1:23]
new_pred = data.frame("predP" = predP,
"knownP" = unname(knownP),
"cellType" = colnames(knownP))
new_pred = data.frame("predP" = predP,
"knownP" = unname(knownP))
View(new_pred)
new_pred = data.frame(knownP)
View(new_pred)
new_pred = data.frame(knownP, predP)
new_pred = data.frame(knownP, predP, ncol=2)
data.frame
new_pred = data.frame(cbind(knownP, predP))
View(new_pred)
new_pred = data.frame(rbind(knownP, predP))
View(new_pred)
knownP
predP
new_pred = data.frame(rbind(knownP, predP),
cellTypes=colnames(knownP))
?data.frame
new_pred = data.frame(knownP, predP, check.rows=TRUE)
new_pred = data.frame(t(knownP), t(predP))
View(new_pred)
new_pred = data.frame(unname(knownP), unname(predP))
View(new_pred)
new_pred = data.frame("known" = unname(knownP),
"pred" = unname(predP))
"pred" = predP)
new_pred = data.frame("known" = knownP,
"pred" = predP)
knownP
new_pred$pred
new_pred = data.frame("known" = predP,
"pred" = knownP)
new_pred
new_pred = data.frame("known" = as.vector(knownP),
"pred" = predP)
View(new_pred)
new_pred = data.frame("pred" = predP)
View(new_pred)
new_pred$known = knownP
dim(knownP)
c(knownP)
new_pred$known = c(knownP)
new_pred
ggplot(new_pred, aes(x=knownP, y=predP, shape=CellType)) +
geom_abline(slope=1, intercept=0, linetype=2, colour="gray20") +
scale_shape_manual(values = 12:(12+length(knownP))) + geom_point(size=4) +
labs(x="Known Proportions", y="Predicted Proportions")
######## PLOT PROPS #########
library(ggplot2)
ggplot(new_pred, aes(x=knownP, y=predP, shape=CellType)) +
geom_abline(slope=1, intercept=0, linetype=2, colour="gray20") +
scale_shape_manual(values = 12:(12+length(knownP))) + geom_point(size=4) +
labs(x="Known Proportions", y="Predicted Proportions")
ggplot(new_pred, aes(x=knownP, y=predP, shape=celltype)) +
geom_abline(slope=1, intercept=0, linetype=2, colour="gray20") +
scale_shape_manual(values = 12:(12+length(knownP))) + geom_point(size=4) +
labs(x="Known Proportions", y="Predicted Proportions")
new_pred$known = c(knownP)
new_pred$celltype = colnames(knownP)
ggplot(new_pred, aes(x=knownP, y=predP, shape=celltype)) +
geom_abline(slope=1, intercept=0, linetype=2, colour="gray20") +
scale_shape_manual(values = 12:(12+length(knownP))) + geom_point(size=4) +
labs(x="Known Proportions", y="Predicted Proportions")
ggplot(new_pred, aes(x=knownP, y=predP, shape=celltype)) +
geom_abline(slope=1, intercept=0, linetype=2, colour="gray20") +
scale_shape_manual(values = 12:(12+ncol(knownP))) + geom_point(size=4) +
labs(x="Known Proportions", y="Predicted Proportions")
ncol(knownP)
ggplot(new_pred, aes(x=knownP, y=predP, shape=celltype)) +
geom_abline(slope=1, intercept=0, linetype=2, colour="gray20") +
labs(x="Known Proportions", y="Predicted Proportions")
ggplot(new_pred, aes(x=knownP, y=predP, shape=celltype)) + geom_point(size=4) +
geom_abline(slope=1, intercept=0, linetype=2, colour="gray20") +
labs(x="Known Proportions", y="Predicted Proportions")
ggplot(new_pred, aes(x=knownP, y=predP, shape=celltype)) +
geom_abline(slope=1, intercept=0, linetype=2, colour="gray20") +
scale_shape_manual(values = 1:(1+ncol(knownP))) + geom_point(size=4) +
labs(x="Known Proportions", y="Predicted Proportions")
ggplot(new_pred, aes(x=knownP, y=predP, shape=celltype)) +
geom_abline(slope=1, intercept=0, linetype=2, colour="gray20") +
scale_shape_manual(values = 1:23) + geom_point(size=4) +
labs(x="Known Proportions", y="Predicted Proportions")
ggplot(new_pred, aes(x=known, y=pred, shape=celltype)) +
geom_abline(slope=1, intercept=0, linetype=2, colour="gray20") +
scale_shape_manual(values = 1:23) + geom_point(size=4) +
labs(x="Known Proportions", y="Predicted Proportions")
ggplot(new_pred, aes(x=known, y=pred, shape=celltype)) +
geom_abline(slope=1, intercept=0, linetype=2, colour="gray20") +
scale_shape_manual(values = 1:24) + geom_point(size=4) +
labs(x="Known Proportions", y="Predicted Proportions")
ggplot(new_pred, aes(x=known, y=pred, shape=celltype)) +
geom_abline(slope=1, intercept=0, linetype=2, colour="gray20") +
geom_point(size=4) +
labs(x="Known Proportions", y="Predicted Proportions")
View(new_pred)
as.numeric(c(knownP))
new_pred$known = as.numeric(c(knownP))
ggplot(new_pred, aes(x=known, y=pred, shape=celltype)) +
geom_abline(slope=1, intercept=0, linetype=2, colour="gray20") +
scale_shape_manual(values = 1:24) + geom_point(size=4) +
labs(x="Known Proportions", y="Predicted Proportions")
ggplot(new_pred, aes(x=known, y=pred, shape=celltype)) +
geom_abline(slope=1, intercept=0, linetype=2, colour="gray20") +
scale_shape_manual(values = 1:23) + geom_point(size=4) +
labs(x="Known Proportions", y="Predicted Proportions")
synthetic_visium_data$relative_spot_composition[1,1:23]
synthetic_visium_data$relative_spot_composition[1:2,1:23]
c(synthetic_visium_data$relative_spot_composition[1:2,1:23])
c(c(synthetic_visium_data$relative_spot_composition[1:2,1:23]))
unlist(synthetic_visium_data$relative_spot_composition[1:2,1:23])
unlist(t(synthetic_visium_data$relative_spot_composition[1:2,1:23]))
c(unlist(t(synthetic_visium_data$relative_spot_composition[1:2,1:23])))
unlist(synthetic_visium_data$relative_spot_composition[1:2,1:23])
c(t(synthetic_visium_data$relative_spot_composition[1:2,1:23]))
n = 10
decon_mtrx[1:n,1:23]
c(predP)
predP = decon_mtrx[1:n,1:23]
c(predP)
c(t(predP))
rep(c("A", "b", "c"), 3)
n = 10
knownP = synthetic_visium_data$relative_spot_composition[1:n,1:23]
predP = decon_mtrx[1:n,1:23]
new_pred = data.frame("pred" = c(t(predP)))
new_pred$known = as.numeric(c(t(knownP)))
new_pred$celltype = rep(colnames(knownP), n)
ggplot(new_pred, aes(x=known, y=pred, shape=celltype)) +
geom_abline(slope=1, intercept=0, linetype=2, colour="gray20") +
scale_shape_manual(values = 1:23) + geom_point(size=4) +
labs(x="Known Proportions", y="Predicted Proportions")
nrow(decon_mtrx)
n = nrow(decon_mtrx)
knownP = synthetic_visium_data$relative_spot_composition[1:n,1:23]
predP = decon_mtrx[1:n,1:23]
new_pred = data.frame("pred" = c(t(predP)))
new_pred$known = as.numeric(c(t(knownP)))
new_pred$celltype = rep(colnames(knownP), n)
ggplot(new_pred, aes(x=known, y=pred, shape=celltype)) +
geom_abline(slope=1, intercept=0, linetype=2, colour="gray20") +
scale_shape_manual(values = 1:23) + geom_point(size=4) +
labs(x="Known Proportions", y="Predicted Proportions")
n = nrow(decon_mtrx)
knownP = synthetic_visium_data$relative_spot_composition[1:n,1:23]
predP = decon_mtrx[1:n,1:23]
new_pred = data.frame("pred" = c(t(predP)))
new_pred$known = as.numeric(c(t(knownP)))
new_pred$celltype = rep(colnames(knownP), n)
ggplot(new_pred, aes(x=known, y=pred, shape=celltype)) +
geom_abline(slope=1, intercept=0, linetype=2, colour="gray20") +
scale_shape_manual(values = 1:23) + geom_point(size=1) +
labs(x="Known Proportions", y="Predicted Proportions")
mean(diag(res), na.rm=TRUE)
dim(synthetic_visium_data$relative_spot_composition)
decon_mtrx
dim(synthetic_visium_data$relative_spot_composition)
res2 = cor(synthetic_visium_data$relative_spot_composition[,1:23], decon_mtrx[,1:23], use="complete.obs")
View(res2)
decon_mtrx[1:6, 1:4]
synthetic_visium_data$relative_spot_composition[1:6, 1:4]
synthetic_visium_data$relative_spot_composition[17:25, 1:4]
mean(diag(res), na.rm=TRUE)
res
res[1,1]
knownP[1,1]
knownP[1,]
predP[1,]
